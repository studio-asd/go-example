syntax = "proto3";

package go_example.api.ledger.v1;
option go_package = "github.com/studio-asd/go-example/proto/api/ledger/v1";

import "buf/validate/validate.proto";
import "google/protobuf/timestamp.proto";

message MovementEntry {
  message FromAccount {
    string from_account_id = 1 [ (buf.validate.field).required = true ];
    // include_child explicitly sums the amount of money in the main and child
    // accounts. The behavior of the movement will be determined by the main
    // account(from_account_id). If the main account doesn't allow the balances
    // to be < 0 then the movement will be rejected if the SUM of money is
    // negative.
    bool include_child = 2;
  }

  FromAccount from_account = 1 [ (buf.validate.field).required = true ];
  string to_account_id = 2 [ (buf.validate.field).required = true ];
  string amount = 3 [ (buf.validate.field).required = true ];
  // client_id is an identifier passed by the client so the client can find the
  // ledger entry later on using this id. Its up to the client whether they want
  // to supply this id or not.
  string client_id = 4;
}

message TransactRequest {
  string idempotency_key = 1 [ (buf.validate.field).required = true ];
  // include_child_accounts ensure the child account is being calculated in the
  // transaction and the SUM of the main and child account is not below zero(0).
  bool include_child_accounts = 5;
  repeated MovementEntry movement_entries = 20
      [ (buf.validate.field).repeated = {min_items : 1 max_items : 100} ];
}

message TransactResponse {
  message Balance {
    // account_id is the affected account_id for the balance output of the
    // transaction.
    string account_id = 1;
    // ledger_id is the new ledger_id for the new balance.
    string ledger_id = 2;
    // new_balance is the latest balance after transaction.
    string new_balance = 3;
    // previous_balance is the previous locked balance before transaction is
    // completed.
    string previous_balance = 4;
    // previous_ledger_id is the ledger_id for the previous_balance.
    string previous_ledger_id = 5;
    // previous_movement is the movement_id for the previous balance.
    string previous_movement_id = 6;
  }
  message LedgerEntry {
    string ledger_id = 1;
    string client_id = 2;
    int32 movement_sequence = 3;
  }

  // movement_id is a unqiue identifier for a transact/movement request. All
  // movement entries requested in a single request will be associated by this
  // movement_id.
  string movement_id = 1;
  // ledger_entries is entry per ledger row ordered with movement_entry in the
  // transact request. But as one ledger row can only contains of one account,
  // one movement will be translated into two entries with the same client_id(if
  // exist). For example:
  //
  // movement: from A to B for 200
  //
  // Will be translated to
  //
  // ledger: ledger_id_a A -200 movement_client_id
  // ledger: ledger_id_b B 200 movement_client_id
  repeated LedgerEntry ledger_entries = 2;
  // ending_balances is the detailed balance changes and the ending state of the
  // balance for each movement. Please NOTE that ending_balances is not sorted
  // and the client need to re-map the ending_balances per account id on their
  // side.
  repeated Balance ending_balances = 3;
  // transact_time is the timestamp for the transaction which also the same with
  // all created_at and updated_at values. You can also use this field for the
  // time balance updated.
  google.protobuf.Timestamp transact_time = 10;
}
