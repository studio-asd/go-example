// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package postgres

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createSecurityPermissionKey = `-- name: CreateSecurityPermissionKey :exec
INSERT INTO security_permission_keys(
    permission_key,
    permission_type,
    permission_key_description,
    created_at
) VALUES($1,$2,$3,$4)
`

type CreateSecurityPermissionKeyParams struct {
	PermissionKey            string
	PermissionType           string
	PermissionKeyDescription sql.NullString
	CreatedAt                sql.NullTime
}

func (q *Queries) CreateSecurityPermissionKey(ctx context.Context, arg CreateSecurityPermissionKeyParams) error {
	_, err := q.db.Exec(ctx, createSecurityPermissionKey,
		arg.PermissionKey,
		arg.PermissionType,
		arg.PermissionKeyDescription,
		arg.CreatedAt,
	)
	return err
}

const createSecurityRole = `-- name: CreateSecurityRole :one
INSERT INTO security_roles(
    role_uuid,
    role_name,
    created_at
) VALUES ($1,$2,$3) RETURNING role_id
`

type CreateSecurityRoleParams struct {
	RoleUuid  uuid.UUID
	RoleName  string
	CreatedAt time.Time
}

func (q *Queries) CreateSecurityRole(ctx context.Context, arg CreateSecurityRoleParams) (int64, error) {
	row := q.db.QueryRow(ctx, createSecurityRole, arg.RoleUuid, arg.RoleName, arg.CreatedAt)
	var role_id int64
	err := row.Scan(&role_id)
	return role_id, err
}

const createSecurityRolePermission = `-- name: CreateSecurityRolePermission :exec
INSERT INTO security_role_permissions(
    role_id,
    permission_key,
    permission_values,
    permission_bits_value,
    row_version,
    created_at,
    updated_at
) VALUES ($1,$2,$3,$4,$5,$6,$7)
`

type CreateSecurityRolePermissionParams struct {
	RoleID              int64
	PermissionKey       string
	PermissionValues    []PermissionValue
	PermissionBitsValue int32
	RowVersion          int64
	CreatedAt           time.Time
	UpdatedAt           time.Time
}

func (q *Queries) CreateSecurityRolePermission(ctx context.Context, arg CreateSecurityRolePermissionParams) error {
	_, err := q.db.Exec(ctx, createSecurityRolePermission,
		arg.RoleID,
		arg.PermissionKey,
		arg.PermissionValues,
		arg.PermissionBitsValue,
		arg.RowVersion,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getPermissionKeys = `-- name: GetPermissionKeys :many
SELECT permission_key,
    permission_type,
    permission_key_description,
    created_at,
    updated_at
FROM security_permission_keys
WHERE permission_key = ANY($1::varchar[])
`

func (q *Queries) GetPermissionKeys(ctx context.Context, dollar_1 []string) ([]SecurityPermissionKey, error) {
	rows, err := q.db.Query(ctx, getPermissionKeys, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SecurityPermissionKey
	for rows.Next() {
		var i SecurityPermissionKey
		if err := rows.Scan(
			&i.PermissionKey,
			&i.PermissionType,
			&i.PermissionKeyDescription,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSecurityRolePermissions = `-- name: GetSecurityRolePermissions :many
select role_id,
    permission_key,
    permission_values,
    permission_bits_value,
    row_version,
    created_at,
    updated_at
FROM security_role_permissions
WHERE role_id = $1
`

func (q *Queries) GetSecurityRolePermissions(ctx context.Context, roleID int64) ([]SecurityRolePermission, error) {
	rows, err := q.db.Query(ctx, getSecurityRolePermissions, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SecurityRolePermission
	for rows.Next() {
		var i SecurityRolePermission
		if err := rows.Scan(
			&i.RoleID,
			&i.PermissionKey,
			&i.PermissionValues,
			&i.PermissionBitsValue,
			&i.RowVersion,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
