// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package postgres

import (
	"context"
	"database/sql"
	"net/netip"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
	external_id,
	created_at,
	updated_at
) VALUES($1,$2,$3) RETURNING user_id
`

type CreateUserParams struct {
	ExternalID string
	CreatedAt  time.Time
	UpdatedAt  sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser, arg.ExternalID, arg.CreatedAt, arg.UpdatedAt)
	var user_id int64
	err := row.Scan(&user_id)
	return user_id, err
}

const createUserPII = `-- name: CreateUserPII :exec
INSERT INTO user_pii (
	user_id,
	email,
	phone_number,
	identity_number,
	identity_type,
	created_at,
	updated_at
) VALUES($1,$2,$3,$4,$5,$6,$7)
`

type CreateUserPIIParams struct {
	UserID         int64
	Email          string
	PhoneNumber    sql.NullString
	IdentityNumber sql.NullString
	IdentityType   sql.NullInt32
	CreatedAt      time.Time
	UpdatedAt      sql.NullTime
}

func (q *Queries) CreateUserPII(ctx context.Context, arg CreateUserPIIParams) error {
	_, err := q.db.Exec(ctx, createUserPII,
		arg.UserID,
		arg.Email,
		arg.PhoneNumber,
		arg.IdentityNumber,
		arg.IdentityType,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createUserSecret = `-- name: CreateUserSecret :one
INSERT INTO user_secrets(
	external_id,
    user_id,
    secret_key,
    secret_type,
    current_secret_version,
    created_at
) VALUES($1,$2,$3,$4,$5,$6) RETURNING secret_id
`

type CreateUserSecretParams struct {
	ExternalID           string
	UserID               int64
	SecretKey            string
	SecretType           int32
	CurrentSecretVersion int64
	CreatedAt            time.Time
}

func (q *Queries) CreateUserSecret(ctx context.Context, arg CreateUserSecretParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUserSecret,
		arg.ExternalID,
		arg.UserID,
		arg.SecretKey,
		arg.SecretType,
		arg.CurrentSecretVersion,
		arg.CreatedAt,
	)
	var secret_id int64
	err := row.Scan(&secret_id)
	return secret_id, err
}

const createUserSecretVersion = `-- name: CreateUserSecretVersion :exec
INSERT INTO user_secret_versions(
    secret_id,
    secret_version,
    secret_value,
    created_at
) VALUES($1,$2,$3,$4)
`

type CreateUserSecretVersionParams struct {
	SecretID      int64
	SecretVersion int64
	SecretValue   string
	CreatedAt     time.Time
}

func (q *Queries) CreateUserSecretVersion(ctx context.Context, arg CreateUserSecretVersionParams) error {
	_, err := q.db.Exec(ctx, createUserSecretVersion,
		arg.SecretID,
		arg.SecretVersion,
		arg.SecretValue,
		arg.CreatedAt,
	)
	return err
}

const createUserSession = `-- name: CreateUserSession :exec
INSERT INTO user_sessions(
	session_id,
	session_type,
	user_id,
	random_id,
	created_from_ip,
	created_from_loc,
	created_from_user_agent,
	session_metadata,
	created_at,
	expired_at
) VALUES($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)
`

type CreateUserSessionParams struct {
	SessionID            uuid.UUID
	SessionType          int32
	UserID               sql.NullInt64
	RandomID             string
	CreatedFromIp        netip.Addr
	CreatedFromLoc       sql.NullString
	CreatedFromUserAgent string
	SessionMetadata      []byte
	CreatedAt            time.Time
	ExpiredAt            time.Time
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) error {
	_, err := q.db.Exec(ctx, createUserSession,
		arg.SessionID,
		arg.SessionType,
		arg.UserID,
		arg.RandomID,
		arg.CreatedFromIp,
		arg.CreatedFromLoc,
		arg.CreatedFromUserAgent,
		arg.SessionMetadata,
		arg.CreatedAt,
		arg.ExpiredAt,
	)
	return err
}

const getUserByExternalID = `-- name: GetUserByExternalID :one
SELECT user_id,
	external_id,
	created_at,
	updated_at
FROM users
WHERE external_id = $1
`

func (q *Queries) GetUserByExternalID(ctx context.Context, externalID string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByExternalID, externalID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.ExternalID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPII = `-- name: GetUserPII :one
SELECT user_id,
	email,
	phone_number,
	identity_number,
	identity_type,
	created_at,
	updated_at
FROM user_pii
WHERE user_id = $1
`

func (q *Queries) GetUserPII(ctx context.Context, userID int64) (UserPii, error) {
	row := q.db.QueryRow(ctx, getUserPII, userID)
	var i UserPii
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.PhoneNumber,
		&i.IdentityNumber,
		&i.IdentityType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSecret = `-- name: GetUserSecret :one
SELECT secret_id,
	external_id,
	user_id,
	secret_key,
	secret_type,
	current_secret_version,
	created_at,
	updated_at
FROM user_secrets
WHERE user_id = $1
	AND secret_key = $2
	AND secret_type = $3
`

type GetUserSecretParams struct {
	UserID     int64
	SecretKey  string
	SecretType int32
}

func (q *Queries) GetUserSecret(ctx context.Context, arg GetUserSecretParams) (UserSecret, error) {
	row := q.db.QueryRow(ctx, getUserSecret, arg.UserID, arg.SecretKey, arg.SecretType)
	var i UserSecret
	err := row.Scan(
		&i.SecretID,
		&i.ExternalID,
		&i.UserID,
		&i.SecretKey,
		&i.SecretType,
		&i.CurrentSecretVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSecretByExternalID = `-- name: GetUserSecretByExternalID :one
SELECT us.secret_id,
	us.external_id,
	us.user_id,
	us.secret_key,
	us.secret_type,
	us.current_secret_version,
	us.created_at,
	-- The updated_at is the same with the new version created_at so we don't
	-- have to retrieve more information from usv.
	us.updated_at,
	usv.secret_value
FROM user_secrets us,
	user_secret_versions usv
WHERE us.external_id = $1
	AND us.current_secret_version = usv.secret_version
	AND us.secret_id = usv.secret_id
`

type GetUserSecretByExternalIDRow struct {
	SecretID             int64
	ExternalID           string
	UserID               int64
	SecretKey            string
	SecretType           int32
	CurrentSecretVersion int64
	CreatedAt            time.Time
	UpdatedAt            sql.NullTime
	SecretValue          string
}

func (q *Queries) GetUserSecretByExternalID(ctx context.Context, externalID string) (GetUserSecretByExternalIDRow, error) {
	row := q.db.QueryRow(ctx, getUserSecretByExternalID, externalID)
	var i GetUserSecretByExternalIDRow
	err := row.Scan(
		&i.SecretID,
		&i.ExternalID,
		&i.UserID,
		&i.SecretKey,
		&i.SecretType,
		&i.CurrentSecretVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SecretValue,
	)
	return i, err
}

const getUserSecretByType = `-- name: GetUserSecretByType :many
SELECT secret_id,
	external_id,
	user_id,
	secret_key,
	secret_type,
	current_secret_version,
	created_at,
	updated_at
FROM user_secrets
WHERE user_id = $1
	AND secret_type = $2
`

type GetUserSecretByTypeParams struct {
	UserID     int64
	SecretType int32
}

func (q *Queries) GetUserSecretByType(ctx context.Context, arg GetUserSecretByTypeParams) ([]UserSecret, error) {
	rows, err := q.db.Query(ctx, getUserSecretByType, arg.UserID, arg.SecretType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UserSecret
	for rows.Next() {
		var i UserSecret
		if err := rows.Scan(
			&i.SecretID,
			&i.ExternalID,
			&i.UserID,
			&i.SecretKey,
			&i.SecretType,
			&i.CurrentSecretVersion,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserSecretValue = `-- name: GetUserSecretValue :one
SELECT us.secret_id,
	us.external_id,
	us.user_id,
	us.secret_key,
	us.secret_type,
	us.current_secret_version,
	us.created_at,
	-- The updated_at is the same with the new version created_at so we don't
	-- have to retrieve more information from usv.
	us.updated_at,
	usv.secret_value
FROM user_secrets us,
	user_secret_versions usv
WHERE us.user_id = $1
	AND us.secret_key = $2
	AND us.secret_type = $3
	AND us.current_secret_version = usv.secret_version
	AND us.secret_id = usv.secret_id
`

type GetUserSecretValueParams struct {
	UserID     int64
	SecretKey  string
	SecretType int32
}

type GetUserSecretValueRow struct {
	SecretID             int64
	ExternalID           string
	UserID               int64
	SecretKey            string
	SecretType           int32
	CurrentSecretVersion int64
	CreatedAt            time.Time
	UpdatedAt            sql.NullTime
	SecretValue          string
}

func (q *Queries) GetUserSecretValue(ctx context.Context, arg GetUserSecretValueParams) (GetUserSecretValueRow, error) {
	row := q.db.QueryRow(ctx, getUserSecretValue, arg.UserID, arg.SecretKey, arg.SecretType)
	var i GetUserSecretValueRow
	err := row.Scan(
		&i.SecretID,
		&i.ExternalID,
		&i.UserID,
		&i.SecretKey,
		&i.SecretType,
		&i.CurrentSecretVersion,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.SecretValue,
	)
	return i, err
}

const getUserSession = `-- name: GetUserSession :one
SELECT us.session_id,
	us.previous_sesision_id,
	us.session_type,
	us.user_id,
	up.email,
	us.random_id,
	us.created_from_ip,
	us.created_from_loc,
	us.created_from_user_agent,
	us.session_metadata,
	us.created_at,
	us.expired_at
FROM user_sessions us
	LEFT JOIN user_pii up ON 
		us.user_id IS NOT NULL AND 
		us.user_id = up.user_id
WHERE us.session_id = $1
`

type GetUserSessionRow struct {
	SessionID            uuid.UUID
	PreviousSesisionID   uuid.NullUUID
	SessionType          int32
	UserID               sql.NullInt64
	Email                sql.NullString
	RandomID             string
	CreatedFromIp        netip.Addr
	CreatedFromLoc       sql.NullString
	CreatedFromUserAgent string
	SessionMetadata      []byte
	CreatedAt            time.Time
	ExpiredAt            time.Time
}

func (q *Queries) GetUserSession(ctx context.Context, sessionID uuid.UUID) (GetUserSessionRow, error) {
	row := q.db.QueryRow(ctx, getUserSession, sessionID)
	var i GetUserSessionRow
	err := row.Scan(
		&i.SessionID,
		&i.PreviousSesisionID,
		&i.SessionType,
		&i.UserID,
		&i.Email,
		&i.RandomID,
		&i.CreatedFromIp,
		&i.CreatedFromLoc,
		&i.CreatedFromUserAgent,
		&i.SessionMetadata,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
